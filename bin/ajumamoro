#!/usr/bin/env php
<?php

require "vendor/autoload.php";

use ajumamoro\Ajumamoro;
use clearice\ClearIce;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

error_reporting(E_ALL ^ E_NOTICE);
$cli = new ClearIce();

ClearIce::addOptions(
    array(
        'short' => 's',
        'long' => 'store',
        'help' => 'specify the backend to be used for storing job tasks. Supported backends: redis, postgresql, mysql and sqlite',
        'has_value' => true,
        'value' => 'STORE'
    ),
    array(
        'short' => 'l',
        'long' => 'load-class-files',
        'help' => 'forces ajumamoro to load php files of the job classes. By default ajumamoro depends on the autoloader to handle the loading of class files.'
    ),
    array(
        'short' => 'h',
        'long' => 'host',
        'help' => 'hostname of the storage backend server',
        'has_value' => true,
        'value' => 'HOST'
    ),
    array(
        'short' => 'u',
        'long' => 'user',
        'help' => 'username to access the storage backend server',
        'has_value' => true,
        'value' => 'USERNAME'
    ),
    array(
        'short' => 'p',
        'long' => 'password',
        'help' => 'password of the user through which you are accessing the storag backend server',
        'has_value' => true,
        'value' => 'PASSWORD'
    ),
    array(
        'short' => 'n',
        'long' => 'name',
        'help' => 'name of the database on the server',
        'has_value' => true,
        'value' => 'DBNAME'
    ),
    array(
        'short' => 'd',
        'long' => 'daemon',
        'help' => 'run the process as a daemon',
    )/*,
    array(
        'short' => 'x',
        'long' => 'use-external-wroker',
        'help' => 'start a new process for jobs'
    )*/
);

ClearIce::addHelp();
ClearIce::setStrict(true);
$arguments = ClearIce::parse();
ClearIce::setDescription(
<<<EOT
Ajumamoro is a tool for running background tasks in PHP apps.
        
Usage: {$argv[0]} [options]
        
EOT
);

if(count($arguments) === 0){
    echo ClearIce::getHelpMessage();
    die();
}
global $logger;
$logger = new Logger();

// Fork and start running as a daemon
if($arguments['daemon'] === true)
{
    $logger->pushHandler(new StreamHandler('ajumamoro.log'));
    $pid = pcntl_fork();
    if($pid == -1)
    {
        fputs(STDERR, "Could not start daemon.\n");
    }
    else if($pid)
    {
        return;
    }
    else
    {
        main_loop($arguments);
    }
}
else
{
    main_loop($arguments);
}

function main_loop($arguments)
{
    global $logger;
    $logger->addInfo("Starting daemon");
    // Get Store;
    try{
        Ajumamoro::init($arguments);
    }
    catch(Exception $e){
        fputs(STDERR, 'Failed to initialize ajumamoro: ' . $e->getMessage());
    };
    
    do
    {
        try{
            $job = Ajumamoro::getNextJob($arguments['load-class-files']);
        }
        catch(ajumamoro\Exception $e)
        {
            
        }
        
        if($job !== false)
        {
            //"Received JOB ...\n";
            Ajumamoro::getStore()->markStarted($job->getId());
            $pid = pcntl_fork();
            if($pid)
            {
                pcntl_wait($status);
                Ajumamoro::resetStore();
                Ajumamoro::getStore()->markFinished($job->getId());
            }
            else
            {
                $job->setup();
                $job->go();
                $job->tearDown();
                die();
            }
        }
        else
        {
            usleep(200);
        }
    }
    while(true);
}

/*function class_loader($class)
{
    @include_once str_replace(array("ajumamoro\\", '\\'), array("", "/"), $class) . '.php';
}*/